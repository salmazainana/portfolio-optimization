<?xml version="1.0" encoding="iso-8859-1" standalone="no" ?>
<!--<!DOCTYPE modList SYSTEM "../dashdocobj.dtd" >-->

<modList id="python" date="19 March, 2024" title="Xpress Python examples">

  <p>Examples of using Xpress from Python</p>

  <model id="Arrays_python" title="Using NumPy arrays to create variables" target="python_optimizer" version="nowb">
    <modFile>example_array.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures>Using NumPy arrays</modFeatures>
    <modDescr>Use NumPy arrays for creating a 3-dimensional array of variables, then use it to create a model.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="BBTree_python" title="Visualize the BB tree" target="python_optimizer" version="nowb">
    <modFile>example_bbtree.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures>Using the newnode callback</modFeatures>
    <modDescr>Shows how to visualize the BB tree of a problem after (partially) solving it. </modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="Infeasible_python" title="Irreducible Infeasible Sets" target="python_optimizer" version="nowb">
    <modFile>example_infeasible.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures>Using Irreducible Infeasible Sets</modFeatures>
    <modDescr>Shows how to analyze an infeasible problem by retrieving an irreducible infeasible subset</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="LoadLP_python" title="Loading a problem" target="python_optimizer" version="nowb">
    <modFile>example_loadlp.py</modFile>
    <modFile>example_loadqp.py</modFile>
    <modFile>example_loadqcqp.py</modFile>
    <modFile>example_loadmiqcqp.py</modFile>
    <modFile>example_loadmiqcqp_sos.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures>Loading a problem directly</modFeatures>
    <modDescr>Shows how directly load a problem and solve it in Python</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="Modelling_python" title="Using Python model objects to build a problem" target="python_optimizer" version="nowb">
    <modFile>example_modeling.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures>Modelling using Python objects</modFeatures>
    <modDescr>Demonstrate how variables, or arrays thereof, and constraints, or arrays of constraints, can be added into a problem. Prints the solution and all attributes/controls of the problem.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="SmallChange_python" title="Changing the optimization problem" target="python_optimizer" version="nowb">
    <modFile>small_change.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures>Changes to a problem</modFeatures>
    <modDescr>Changing an optimization problem using the Xpress Python interface.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="Modify_python" title="Extending a problem" target="python_optimizer" version="nowb">
    <modFile>example_modify.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures>Extending a problem</modFeatures>
    <modDescr>Construct a problem using addVariable and addConstraint, then use the Xpress API routines to amend the problem with rows and quadratic terms.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="NumPy2_python" title="Using NumPy and Xpress" target="python_optimizer" version="nowb">
    <modFile>example_numpy1.py</modFile>
    <modFile>example_numpy2.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures>Using NumPy and Xpress</modFeatures>
    <modDescr>An example of printing a matrix of random numbers and a problem formulation that uses the xpress.Dot() operator to formulate constraints simply.
    Note that the NumPy dot operator is not suitable here as the result is an expression in the Xpress variables. </modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="MaxFS_python" title="Finding an LP subsystem with as many constraints as possible" target="python_optimizer" version="nowb">
    <modFile>example_phase1.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures></modFeatures>
    <modDescr>Given an infeasible LP, find the feasible subsystem of constraints of maximum cardinality.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="basis_sensitivity_python" title="Basis and Stability" target="python_optimizer" version="nowb">
    <modFile>example_basis_sensitivity.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures>Basis handling and sensitivity methods</modFeatures>
    <modDescr><p>We solve a simple 2x2 LP problem to optimality,
which serves as a showcase for basis handling methods and
sensitivity analysis.</p></modDescr>
    <modFurtherinfo>Xpress Python Reference Manual</modFurtherinfo>
  </model>

  <model id="QCQP_python" title="Solving a quadratically constrained problem" target="python_optimizer" version="nowb">
    <modFile>example_qcqp.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures>Building quadratic expressions</modFeatures>
    <modDescr>Solve a quadratically constrained problem</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="QCQP_nonconvex_python" title="Solving a nonconvex quadratic problem" target="python_optimizer" version="nowb">
    <modFile>example_quadnonconvex.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures>Building quadratic expressions</modFeatures>
    <modDescr>Solve a nonconvex quadratic problem</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="QP_python" title="Solving a quadratically problem" target="python_optimizer" version="nowb">
    <modFile>example_quadratic.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures>Building quadratic expressions</modFeatures>
    <modDescr>Solve a quadratic problem</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="Resolve_python" title="Repeatedly solving a problem" target="python_optimizer" version="nowb">
    <modFile>example_resolve.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures>Solving a problem multiple times</modFeatures>
    <modDescr>Reads a problem, solves it, then adds a constraint and re-solves it</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="Indicators_python" title="Using indicators" target="python_optimizer" version="nowb">
    <modFile>example_indicators.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures>Model with indicators</modFeatures>
    <modDescr>Construct a problem from scratch with variables of various types. Adds indicator constraints and
    shows how to retrieve such data once it has been added to the problem using the API functions</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="SOS_python" title="Using special ordered sets" target="python_optimizer" version="nowb">
    <modFile>example_sos.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures>Model with special ordered sets</modFeatures>
    <modDescr>Construct a problem from scratch with variables of various types. Adds Special Ordered Sets (SOSs) and
    shows how to retrieve such data once it has been added to the problem using the API functions</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="TSP_python" title="The travelling salesman problem" target="python_optimizer" version="nowb">
    <modFile>example_tsp.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures>Using Xpress callbacks</modFeatures>
    <modDescr>Retrieves an example fromn https://www.math.uwaterloo.ca/tsp/world/countries.html
    and creates a corresponding TSP instance, then solves it using the Xpress Optimizer
    library with the appropriate callback. Once the optimization is over
    (i.e. the time limit is reached or we find an optimal solution) the
    optimal tour is displayed using matplotlib. </modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="TSP_python_numpy" title="Solving a TSP using NumPy" target="python_optimizer" version="nowb">
    <modFile>example_tsp_numpy.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures>Using Xpress callbacks</modFeatures>
    <modDescr>A randomly generated TSP problem is modeled using
    NumPy vectors and matrices and solved using the Optimizer's
    libraries and callback functions.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="WriteRead_python" title="Writing and reading problem files" target="python_optimizer" version="nowb">
    <modFile>example_write_read.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures>Writing and reading a problem to disk</modFeatures>
    <modDescr>Create a few variables, then build a problem and save it to a file.
    Re-read that file into a new problem and solve it </modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="FeasPump_python" title="The feasiblity pump" target="python_optimizer" version="nowb">
    <modFile>feas_pump.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures>Writing and reading a problem to disk</modFeatures>
    <modDescr>Feasibility pump (prototype) using the Xpress Python interface.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="Knapsack_python" title="Knapsack problem" target="python_optimizer" version="nowb">
    <modFile>knapsack.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures>MIP problem with binary variables</modFeatures>
    <modDescr>Example of a knapsack problem formulated with the Xpress Python interface.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="Queens_python" title="The n-queens problem" target="python_optimizer" version="nowb">
    <modFile>n_queens.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures>Puzzle modeling</modFeatures>
    <modDescr>The n queens: place n queens on an nxn chessboard so that none of them can be eaten in one move.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="Netflow_python" title="Min-cost-flow problem " target="python_optimizer" version="nowb">
    <modFile>netflow.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures>Modelling a graph problem</modFeatures>
    <modDescr>solving a min-cost-flow problem using the Xpress Python interface.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="Sudoku_Python" title="Solving Sudoku" target="python_optimizer" version="nowb">
    <modFile>sudoku.py</modFile>
    <modType>Programming</modType>
    <modRating>4</modRating>
    <modFeatures>Puzzle modeling</modFeatures>
    <modDescr>Place numbers from 1 to 9 into a 9x9 grid such that no number repeats in any row, in any column, and in any 3x3 sub-grid.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="compare_matrices_python" title="Comparing Matrices" target="python_optimizer" version="nowb">
    <modFile>compare_matrices.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures>Compare two optimization problems</modFeatures>
    <modDescr>Load the coefficient matrices of two optimization problems saved in MPS or LP format using the Xpress Optimizer libraries and compare each line by line using SciPy's matrix routines.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="multicommodity_flow_python" title="Multicommodity flow problem" target="python_optimizer" version="nowb">
    <modFile>example_multicommodity_flow.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures>Solve a multicommodity flow minimum cost optimization problem on a randomly created graph</modFeatures>
    <modDescr>Create a random directed graph using NumPy's random functions and then model and solve a minimum-cost multicommodity flow problem constructed on that graph.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="polygon_python" title="Find largest-area inscribed polygon" target="python_optimizer" version="nowb">
    <modFile>polygon.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures></modFeatures>
    <modDescr>Given n, find the n-sided polygon of largest area inscribed in the unit circle.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>


  <model id="read_prob_python" title="Read problem data into matrix and vectors" target="python_optimizer" version="nowb">
    <modFile>example_getmatrix.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures></modFeatures>
    <modDescr>Obtain coefficient matrix, objective coefficients, and constraints' right-hand sides for a given problem.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>


  <model id="miqcqp_solver" title="Solve a nonconvex MIQCQP problem" target="python_optimizer" version="nowb">
    <modFile>miqcqp_solver.py</modFile>
    <modType>Programming</modType>
    <modRating>4</modRating>
    <modFeatures></modFeatures>
    <modDescr>Reformulate a MIQCQP into a MILP and add callbacks to enforce quadratic feasibility of the nonconvex constraints.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="benders_decomp" title="Solve a simple MIP using Benders decomposition" target="python_optimizer" version="nowb">
    <modFile>benders_decomp.py</modFile>
    <modType>Programming</modType>
    <modRating>4</modRating>
    <modFeatures></modFeatures>
    <modDescr>Solve a simple MIP using Benders decomposition. Courtesy of Georgios Patsakis (UC Berkeley, Amazon) and Richard L.-Y. Chen (Amazon).</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="piecewise_linear" title="Create a problem with piecewise linear functions" target="python_optimizer" version="nowb">
    <modFile>piecewise_linear.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures></modFeatures>
    <modDescr>Create a simple problem using the modelling construct <tt>xpress.pwl</tt> for creating piecewise linear functions.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="piecewise_linear2" title="Use the API to create a model with piecewise linear functions" target="python_optimizer" version="nowb">
    <modFile>piecewise_linear2.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures></modFeatures>
    <modDescr>Create a simple problem using the API function <tt>problem.addpwlcons</tt> to create piecewise linear functions. The resulting model is equivalent to <tt>piecewise_linear.py</tt>.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="general_constraint_abs" title="Create a problem with general constraints that use operator abs" target="python_optimizer" version="nowb">
    <modFile>general_constraints_abs.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures></modFeatures>
    <modDescr>Create a simple problem using the modelling methods <tt>abs</tt> for creating general constraints.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="general_constraint_abs_api" title="Create a problem with general constraints with the operator abs by using the API" target="python_optimizer" version="nowb">
    <modFile>general_constraints_abs_api.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures></modFeatures>
    <modDescr>Create a simple problem using the API function <tt>problem.addgencons</tt> for creating general constraints.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="general_constraint_max" title="Create a problem with general constraints that use operator max" target="python_optimizer" version="nowb">
    <modFile>general_constraints_max.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures></modFeatures>
    <modDescr>Create a simple problem using the modelling methods <tt>max</tt> for creating general constraints.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="general_constraint_max_api" title="Create a problem with general constraints with operator max by using the API" target="python_optimizer" version="nowb">
    <modFile>general_constraints_max_api.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures></modFeatures>
    <modDescr>Create a simple problem using the API function <tt>problem.addgencons</tt> for creating <tt>max</tt> general constraints.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="general_constraint_logic" title="Create a problem with logical constraints" target="python_optimizer" version="nowb">
    <modFile>general_constraints_logic.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures></modFeatures>
    <modDescr>Create a simple problem using the modelling methods <tt>max</tt> for creating general constraints.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="general_constraint_logic_api" title="Create a problem with general constraints with logic operators by using the API" target="python_optimizer" version="nowb">
    <modFile>general_constraints_logic_api.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures></modFeatures>
    <modDescr>Create a simple problem using the API function <tt>problem.addgencons</tt> for creating logical (AND and OR) general constraints.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="cuttingstock" title="Create an iterative algorithm cutting stock problem" target="python_optimizer" version="nowb">
    <modFile>cuttingstock.py</modFile>
    <modType>Programming</modType>
    <modRating>3</modRating>
    <modFeatures></modFeatures>
    <modDescr>Use the modeling features to create an iterative solver for a cutting stock problem.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="maxsumlogistic" title="Maximize the sum of logistic curves subject to linear and piecewise linear constraints" target="python_optimizer" version="nowb">
    <modFile>maxSumLogistic.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures></modFeatures>
    <modDescr>Approximate the logistic curves using piecewise linear functions.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="pwltransp" title="Transportation problem with piecewise-linear costs" target="python_optimizer" version="nowb">
    <modFile>pwl_transp.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures></modFeatures>
    <modDescr>Model a transportation problem where the cost are modeled using the <tt>xpress.problem.addpwlcons</tt> function.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="sat" title="Modeling Satisfiability (SAT) problems with MIP" target="python_optimizer" version="nowb">
    <modFile>example_gencons_sat.py</modFile>
    <modType>Programming</modType>
    <modRating>4</modRating>
    <modFeatures></modFeatures>
    <modDescr>A rudimentary SAT solver that translates a Satisfiability (SAT) problem into a MIP and solves it.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="pbo" title="Modeling PseudoBoolean Optimization problems with MIP" target="python_optimizer" version="nowb">
    <modFile>example_gencons_pbo.py</modFile>
    <modType>Programming</modType>
    <modRating>4</modRating>
    <modFeatures></modFeatures>
    <modDescr>A solver of PseudoBoolean optimization problems (PBO) that translates a problem into a MIP and solves it.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="warmstart" title="Re-solving problem using the Barrier method's warm start" target="python_optimizer" version="nowb">
    <modFile>example_barrier_warmstart.py</modFile>
    <modType>Programming</modType>
    <modRating>4</modRating>
    <modFeatures></modFeatures>
    <modDescr>Solve one problem and use its solution to warm-start the solve of a second, slightly different, problem.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="tuner" title="Using the tuner functions in the Python interface" target="python_optimizer" version="nowb">
    <modFile>tuner_example.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures></modFeatures>
    <modDescr>Read a MIPLIB2010 problem instance, then apply the Optimizer's tuner both with default tuner method and with a user-defined method file.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="multiobjknapsack_python" title="Multi-objective knapsack problem" target="python_optimizer" version="nowb">
    <modFile>example_multiobjknapsack.py</modFile>
    <modType>Production planning</modType>
    <modRating>2</modRating>
    <modFeatures>Multi-objective MIP problem with binary variables</modFeatures>
    <modDescr>Example of a multi-objective knapsack problem formulated with the Xpress Python interface.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="goalprog_python" title="Goal programming" target="python_optimizer" version="nowb">
    <modFile>example_goalprog.py</modFile>
    <modType>Production planning</modType>
    <modRating>3</modRating>
    <modFeatures>Lexicographic goal programming using the Xpress multi-objective API</modFeatures>
    <modDescr>This example tries to construct a production plan which meets four different
              goals in order of priority.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="markowitz_python" title="Markowitz portfolio optimization" target="python_optimizer" version="nowb">
    <modFile>example_markowitz.py</modFile>
    <modType>Portfolio optimization</modType>
    <modRating>3</modRating>
    <modFeatures>Multi-objective quadratic optimization</modFeatures>
    <modDescr>In Markowitz portfolio optimization there are two objectives: to maximize reward
              while minimizing risk (i.e. variance). This example plots several points on the
              optimal frontier using a blended multi-objective approach, and shows that a point
              computed using a lexicographic approach also lies on this frontier.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="chess_python" title="Basic LP tasks: problem statement and solving; solution analysis" target="python_optimizer">
    <modType>Production planning</modType>
    <modRating>1</modRating>
    <modFeatures>LP solving, modeling variables and constraints, printing the solution</modFeatures>
    <modDescr>Small, introductory problems to modeling with Python.</modDescr>
    <modFile path="modeling_examples/chess.py">chess.py</modFile>
    <modFile path="modeling_examples/chess2.py">chess2.py</modFile>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="trans_python" title="Network problem: transport from depots to customers" target="python_optimizer">
    <modType>Transportation</modType>
    <modRating>1</modRating>
    <modFeatures>LP solving, modeling variables and constraints</modFeatures>
    <modDescr>Network problem: transport from depots to customers.</modDescr>
    <modFile path="modeling_examples/trans.py">trans.py</modFile>
    <modData viewable="true" path="modeling_examples/Data/trans_data.py">trans_data.py</modData>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="blend_python" title="Blend: A model for mineral blending" target="python_optimizer">
    <modType>Blending</modType>
    <modRating>1</modRating>
    <modFeatures>simple LP problem, formulation of blending constraints</modFeatures>
    <modDescr>Several ores are blended to a final product that must
              have a certain quality ('grade'). We wish to determine
              the quantity of every ore to be used in the blend with
              the objective to maximize the total profit (calculated
              as sales revenues - raw material cost).
    </modDescr>
    <modFile path="modeling_examples/blend.py">blend.py</modFile>
    <modFile path="modeling_examples/blend2.py">blend2.py</modFile>
    <modData viewable="true" path="modeling_examples/Data/blend_data.py">blend_data.py</modData>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="burglar_python" title="Basic MIP tasks: binary variables; logic constraints"  target="python_optimizer">
    <modType>Knapsack</modType>
    <modRating>1</modRating>
    <modFeatures>MIP solving, binary variables, index set types, logic constraints</modFeatures>
    <modDescr>We wish to choose among items of different value and
                  weight those that result in the maximum total value for 
                  a given weight limit.
    </modDescr>
    <modFile path="modeling_examples/burglar.py">burglar.py</modFile>
    <modFile path="modeling_examples/burglari.py">burglari.py</modFile>
    <modFile path="modeling_examples/burglarl.py">burglarl.py</modFile>
    <modFile path="modeling_examples/burglar_rec.py">burglar_rec.py</modFile>
    <modData viewable="true" path="modeling_examples/Data/burglar_rec_dat.py">burglar_rec_dat.py</modData>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>


  <model id="coco_python" title="Coco: The Coco productional planning problem" target="python_optimizer">
    <modType>Production planning</modType>
    <modRating>2</modRating>
    <modFeatures>LP problem, formulation of resource constraints and
                  material balance constraints, formatted solution printing</modFeatures>
    <modDescr>The company Coco has two plants that can produce two types
              of cocoa powder. The plant capacities are limited.
              It is possible to store raw materials and finished product
              from one time period to the next. Raw material prices,
              sales revenues, and the maximum amount that may be sold
              depend on the time period. Raw material storage capacity
              is limited.
              Storing product between time periods incurs storage costs.
              Some product is held in stock at the beginning of the
              planning period.
              The objective function of maximizing the total profit is
              to maximize the sales revenues, minus the cost of production,
              buying raw material, and storing finished products and raw
              material.
    </modDescr>
    <modFile path="modeling_examples/coco.py">coco.py</modFile>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="catenary_python" title="Catenary: Determine chain shape" target="python_optimizer">
    <modType>Nonlinear</modType>
    <modRating>2</modRating>
    <modFeatures>QCQP problem</modFeatures>
    <modDescr>Find the shape of a hanging chain by minimising its potential energy.
    The problem is formulated as a QCQP problem (linear objective, convex quadratic constraints).
    </modDescr>
    <modFile path="modeling_examples/catenary.py">catenary.py</modFile>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="pplan_python" title="Pplan: A project planning problem" target="python_optimizer">
    <modType>Project planning</modType>
    <modRating>3</modRating>
    <modFeatures>Formulation of resource use profiles</modFeatures>
    <modDescr>Over the next 6 months we have three projects which can
              be done. Each of these projects has a profile of manpower
              requirements over its lifetime, and a benefit which accrues
              each month when the project has been completed.
              Our problem is to determine when each project is to start,
              subject to the constraint that in no month can we try to
              use more manpower than is available.
    </modDescr>
    <modFile path="modeling_examples/pplan.py">pplan.py</modFile>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="firestns_python" title="Firestns: A set-covering model for emergency service provision" target="python_optimizer">
    <modType>Set covering</modType>
    <modRating>1</modRating>
    <modFeatures>Solve a MIP problem</modFeatures>
    <modDescr>Minimize the total number of firestations that are required to service a set of towns within a specified permissible travel time.</modDescr>
    <modFile path="modeling_examples/fstns.py">fstns.py</modFile>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="Rosenbrock_python" title="Solving a quadratically constrained problem" target="python_optimizer" version="nowb">
    <modFile>rosenbrock.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures>Solve a nonlinear problem</modFeatures>
    <modDescr>Define the well-known Rosenbrock function and minimize it.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="polynomial_python" title="Solve a polynomial optimization problem" target="python_optimizer" version="nowb">
    <modFile>polynomial_opt.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures>Modeling a polynomial optimization problem</modFeatures>
    <modDescr>Create a random polynomial of degree k using the Dot operator and find its minimum using the Nonlinear solver.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

  <model id="userfunc_python" title="Modeling with user functions" target="python_optimizer" version="nowb">
    <modFile>example_userfunc.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures>Modeling with user functions</modFeatures>
    <modDescr>Shows how to create and solve a nonlinear problem whose constraints and objective functions are defined as user functions.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>
  
    <model id="inscribedsquare" title="Solve a nonconvex nonlinear problem from MINLPlib with a local or global solver" target="python_optimizer" version="nowb">
    <modFile>inscribedsquare.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures>Solving with local or global solvers</modFeatures>
    <modDescr>Shows how to model a general nonlinear problem and solve it with a local or global solver.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>

    <model id="mostviolated" title="Implementing a branching rule using branch objects" target="python_optimizer" version="nowb">
    <modFile>mostviolated.py</modFile>
    <modType>Programming</modType>
    <modRating>2</modRating>
    <modFeatures>Demonstrate the Xpress change branch object callback</modFeatures>
    <modDescr>Shows how to set up a branching rule branching on the most violated Integer/Binary variable.</modDescr>
    <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
  </model>
  
</modList>
